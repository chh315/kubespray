---
- name: Gather host facts to get ansible_os_family
  setup:
    gather_subset: '!all'
    filter: ansible_*

# Disable Docker & Kubelet
- name: disable service docker and ensure it is is stopped
  service:
    name: docker
    enabled: no
    state: stopped
- name: disable service kubelet and ensure it is stopped
  service:
    name: kubelet
    enabled: no
    state: stopped

# Reboot Before Update
- name: Reboot the machine before update
  reboot:
    pre_reboot_delay: "{{ server_update_reboot_pre_reboot_delay }}"
    post_reboot_delay: "{{ server_update_reboot_post_reboot_delay }}"
    reboot_timeout: "{{ server_update_reboot_reboot_timeout }}"
  when: reboot_default | bool

#Upgrade and reboot Redhat/CentOS based servers
- block:
  - name: upgrade all packages, excluding docker packages
    yum:
      name: "{{ server_update_yum_install_pkgs | default('*') }}"
      state: latest # noqa 10
      update_cache: yes
      exclude: "{{ server_update_yum_exclude_pkgs | default([]) }}"
    register: stat_yum_upgrade_results
    until: "stat_yum_upgrade_results is success"
    retries: 2
    delay: 30
    tags:
      - skip_ansible_lint
  rescue:
  - name: debug yum failed
    debug: msg='YUM Upgrade failed'
  - meta: flush_handlers
  - name: fail check
    fail: msg='YUM Upgrade failed'
  when: ansible_os_family == "RedHat" and update_default | bool

- name: debug stat_yum_upgrade_results
  debug: var=stat_yum_upgrade_results
  when: debug_enabled_default | bool

# Remove Unused Kernel
- name: Remove old kernels from the OS keeping only the last most recent three
  command: /usr/bin/package-cleanup --oldkernels --count=3 -y

# Reboot Again If Necessary
- name: install yum-utils
  package:
    name: yum-utils

- name: check if reboot is required
  shell: needs-restarting -r
  failed_when: false
  register: reboot_required
  changed_when: false
- name: Reboot the machine after update if requried
  reboot:
    pre_reboot_delay: "{{ server_update_reboot_pre_reboot_delay }}"
    post_reboot_delay: "{{ server_update_reboot_post_reboot_delay }}"
    reboot_timeout: "{{ server_update_reboot_reboot_timeout }}"
  when: reboot_default | bool and reboot_required.rc != 0 | bool

# Enable Docker & Kubelet
- name: enable service docker and ensure it is started
  service:
    name: docker
    enabled: yes
    state: started
- name: enable service kubelet and ensure it is started
  service:
    name: kubelet
    enabled: yes
    state: started
